name: Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select the environment to deploy"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - tst
          - stg
          - prod
      promoteToTst:
        description: "Promote to Test"
        required: false
        default: false
        type: boolean
      promoteToStg:
        description: "Promote to Stage"
        required: false
        default: false
        type: boolean

env:
  appName: "occt"
  acrName: "occtnpacr"
  service_name: "occt-healthcheck"
  ENVIRONMENT: "${{ inputs.environment || 'dev' }}"
  BUILD_NUMBER: "${{ github.run_number }}"
  NOTIFICATIONS_EMAIL_RECIPIENT: "mrial_subchangeptum.com"
  NPM_REGISTRY: "${{ vars.NPM_REGISTRY }}"
  envVarMap:
  dev: "np"
  tst: "np"
  stg: "prod"
  prd: "prod"

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build_status: ${{ steps.build.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Print Value
        run: |
          echo "Value: ${envVarMap[$ENVIRONMENT]}"
          echo "Value: ${envVarMap["tst"]}"
          echo "Value: ${{env.envVarMap.stg}}"
          echo "Value: ${{env.envVarMap.prd}}"

  docker-build-push:
    needs: build
    if: ${{ inputs.promoteToTst || inputs.promoteToStg }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

  qa-approval:
    if: ${{(inputs.promoteToTst || inputs.environment == 'tst') && always() }}
    needs: [build, docker-build-push]
    runs-on: ubuntu-latest
    environment:
      name: QA
    steps:
      - name: Wait for QA approval
        run: |
          echo "QA Approval"

  deploy:
    if: ${{ (inputs.promoteToTst || inputs.environment == 'tst') && always() }}
    needs: [qa-approval]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to ${{ inputs.environment }}
        run: |
          echo "Deploying ${{ env.appName }} to ${{ inputs.environment }}"
